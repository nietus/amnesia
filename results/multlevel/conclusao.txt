Adicionar muitos níveis de cache não necessariamente melhora o aproveitamento de localidade espacial e temporal por alguns motivos relacionados ao funcionamento dos sistemas de memória e ao comportamento dos programas. Vamos analisar isso passo a passo:

Localidade Espacial e Temporal:
A localidade espacial refere-se à tendência de um programa acessar dados que estão próximos uns dos outros na memória (por exemplo, elementos consecutivos de um array).
A localidade temporal refere-se à tendência de acessar os mesmos dados repetidamente em um curto período de tempo.
Os caches são projetados para explorar essas propriedades, armazenando dados frequentemente usados ou próximos aos acessados.
Limitações com Muitos Níveis de Cache:
Latência e Complexidade: Cada nível adicional de cache introduz um pequeno atraso para verificar se os dados estão presentes naquele nível antes de passar para o próximo. Com muitos níveis, esse overhead pode acumular, reduzindo o ganho de desempenho.
Tamanho dos Caches: Caches mais próximos da CPU (L1, L2) são menores e mais rápidos, enquanto os mais distantes (L3, L4) são maiores e mais lentos. Adicionar muitos níveis pode levar a uma redundância ineficiente, onde os dados em caches intermediários não são usados com frequência suficiente para justificar sua existência.
Conflitos e Substituições: Com mais níveis, aumenta a chance de políticas de substituição (como LRU - Least Recently Used) desalojarem dados úteis prematuramente, especialmente se o programa tiver padrões de acesso imprevisíveis, prejudicando a localidade temporal.
Custo de Coerência: Em sistemas multi-core, manter a coerência entre muitos níveis de cache (garantir que todos os caches tenham dados consistentes) torna-se mais complexo e custoso, podendo anular os benefícios de localidade.
Padrões de Acesso do Programa:
Se o programa não exibir forte localidade (por exemplo, acessos aleatórios ou esparsos), adicionar mais caches não melhora o desempenho, pois os dados armazenados não serão reutilizados.
Além disso, com muitos níveis, o tempo gasto para buscar dados em caches mais distantes pode se aproximar do tempo de acesso à memória principal, reduzindo a vantagem do cache.
Ponto de Retorno Decrescente:
Há um equilíbrio ideal entre o número de níveis de cache, sua latência, tamanho e o comportamento do programa. Após certo ponto (geralmente 3 ou 4 níveis em arquiteturas modernas), os benefícios diminuem, e o custo (em termos de energia, área no chip e complexidade) supera as vantagens.
Conclusão: Muitos níveis de cache podem não melhorar o aproveitamento de localidade espacial e temporal porque introduzem overheads, aumentam a complexidade de gerenciamento e nem sempre se alinham aos padrões de acesso do programa. O design ideal depende de um tradeoff entre latência, capacidade e eficiência, e não de simplesmente adicionar mais camadas.